repositories {
    mavenLocal()
    jcenter()
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:${SerenityCoreVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "net.serenity-bdd:serenity-core:${SerenityCoreVersion}"
    compile "net.serenity-bdd:serenity-screenplay:${SerenityCoreVersion}"
    compile "net.serenity-bdd:serenity-screenplay-webdriver:${SerenityCoreVersion}"
    compile "net.serenity-bdd:serenity-cucumber:${SerenityCucumberVersion}"
    compile "org.assertj:assertj-core:${assertJVersion}"
    compile "org.slf4j:slf4j-simple:${slf4jVersion}"
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    compile group: 'io.appium', name: 'java-client', version: '6.1.0'
    testCompile "junit:junit:${junitVersion}"
}

test {
    println SerenityCoreVersion
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
    def nodeConfig = System.getProperty('nodeConfig')
    Properties properties = new Properties()
    if (nodeConfig == null) {
        properties.load(project.file(System.getProperty("user.dir") + '/src/test/resources/node_configs/android8.properties').newDataInputStream())
    } else {
        properties.load(project.file(System.getProperty("user.dir") + '/src/test/resources/node_configs/' + nodeConfig + '.properties').newDataInputStream())
    }
    Enumeration<String> enums = (Enumeration<String>) properties.propertyNames()
    while (enums.hasMoreElements()) {
        String propertyKey = enums.nextElement()
        String propertyValue = properties.getProperty(propertyKey)
        if(propertyKey.equals('appium.app')){
            systemProperties[propertyKey] = System.getProperty("user.dir") + propertyValue;
        }
        else {
            systemProperties[propertyKey] = propertyValue
        }
    }
}

gradle.startParameter.continueOnFailure = true
